// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hcaqodjylicmppxcbqbh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhjYXFvZGp5bGljbXBweGNicWJoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzgzMDIxNDksImV4cCI6MjA1Mzg3ODE0OX0.h4pO6UShabHNPWC9o_EMbbhOVHsR-fuZQ5-b85hNB4w";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Type definitions
export interface PatientProfile {
  id: string;
  first_name: string | null;
  last_name: string | null;
  email?: string;
  age?: number;
  gender?: string;
  bloodGroup?: string;
  allergies?: string;
  emergencyContact?: string;
  height?: number;
  birthDate?: string;
  foodHabit?: string;
  currentMedicalConditions?: string;
}

// Function to create or update a user role
export async function createUserRole(userId: string, role: string): Promise<any> {
  try {
    // Call the Edge Function instead of direct RPC
    const { data, error } = await supabase.functions.invoke('upsert-user-role', {
      body: { 
        userId, 
        role 
      }
    });

    if (error) {
      console.error('Error creating user role:', error);
      throw error;
    }

    return data;
  } catch (error: any) {
    console.error('Exception in createUserRole:', error);
    throw error;
  }
}

// Function to create or update patient details
export async function createPatientDetails(
  patientId: string,
  age: number,
  gender: string,
  bloodGroup: string,
  allergies: string | null,
  emergencyContact: string,
  height: number | null,
  birthDate: string | null,
  foodHabit: string | null,
  currentMedicalConditions: string | null
): Promise<any> {
  try {
    // Call the Edge Function instead of direct RPC
    const { data, error } = await supabase.functions.invoke('upsert-patient-details', {
      body: {
        patientId,
        age,
        gender,
        bloodGroup,
        allergies,
        emergencyContact,
        height,
        birthDate,
        foodHabit,
        currentMedicalConditions
      }
    });

    if (error) {
      console.error('Error creating patient details:', error);
      throw error;
    }

    return data;
  } catch (error: any) {
    console.error('Exception in createPatientDetails:', error);
    throw error;
  }
}

// Function to fetch patient prescriptions
export async function fetchPatientPrescriptions(patientId: string, doctorId: string): Promise<any[]> {
  try {
    const { data, error } = await supabase.rpc('get_patient_prescriptions', {
      p_patient_id: patientId,
      p_doctor_id: doctorId
    });
    
    if (error) {
      console.error('Error fetching patient prescriptions:', error);
      throw error;
    }
    
    return data || [];
  } catch (error: any) {
    console.error('Exception in fetchPatientPrescriptions:', error);
    throw error;
  }
}

// Function to get doctor patients
export async function getDoctorPatients(doctorId: string): Promise<PatientProfile[]> {
  try {
    console.log("Calling get_doctor_patients RPC with doctor ID:", doctorId);
    // Using the security definer function that accesses the patient_assignments table
    const { data, error } = await supabase.rpc('get_doctor_patients', {
      p_doctor_id: doctorId
    });
    
    if (error) {
      console.error('Error fetching doctor patients:', error);
      throw error;
    }
    
    console.log(`Retrieved ${data?.length || 0} patients for doctor ${doctorId}`);
    return data as PatientProfile[] || [];
  } catch (error: any) {
    console.error('Exception in getDoctorPatients:', error);
    throw error;
  }
}

// Function to get nutritionist patients
export async function getNutritionistPatients(nutritionistId: string): Promise<PatientProfile[]> {
  try {
    console.log("Calling RPC to get patients for nutritionist:", nutritionistId);
    // Using the security definer function to get nutritionist's patients
    const { data, error } = await supabase.rpc('get_nutritionist_patients', {
      p_nutritionist_id: nutritionistId
    });
    
    if (error) {
      console.error('Error fetching nutritionist patients:', error);
      throw error;
    }
    
    // Format the response to match PatientProfile interface
    const formattedPatients = (data || []).map((patient: any) => ({
      id: patient.patient_id,
      first_name: patient.patient_first_name,
      last_name: patient.patient_last_name
    }));
    
    console.log(`Retrieved ${formattedPatients.length} patients for nutritionist ${nutritionistId}`);
    return formattedPatients;
  } catch (error: any) {
    console.error('Exception in getNutritionistPatients:', error);
    throw error;
  }
}

// Updated function to assign care team with better error handling
export async function assignCareTeam(
  patientId: string, 
  doctorId: string, 
  nutritionistId: string | null, 
  adminId: string
): Promise<any> {
  try {
    console.log("Calling assignCareTeam with:", {
      patientId,
      doctorId,
      nutritionistId,
      adminId
    });
    
    const { data, error } = await supabase.functions.invoke('admin-assign-care-team', {
      body: {
        patient_id: patientId,
        doctor_id: doctorId,
        nutritionist_id: nutritionistId,
        admin_id: adminId
      }
    });
    
    console.log("Edge function response:", { data, error });
    
    if (error) {
      console.error('Error invoking edge function:', error);
      throw new Error('Failed to communicate with server. Please try again.');
    }
    
    // Handle case where the function returned data but with error status
    if (data && data.error) {
      throw new Error(data.error);
    }
    
    return data;
  } catch (error: any) {
    console.error('Exception in assignCareTeam:', error);
    throw error;
  }
}

// Function to allow administrators to delete a user
export async function adminDeleteUser(
  userId: string, 
  adminId: string
): Promise<any> {
  try {
    console.log("Calling admin-delete-user with:", {
      userId,
      adminId
    });
    
    const { data, error } = await supabase.functions.invoke('admin-delete-user', {
      body: {
        user_id: userId,
        admin_id: adminId
      }
    });
    
    console.log("Edge function response:", { data, error });
    
    if (error) {
      console.error('Error invoking edge function:', error);
      throw new Error('Failed to communicate with server. Please try again.');
    }
    
    // Handle case where the function returned data but with error status
    if (data && data.error) {
      throw new Error(data.error);
    }
    
    return data;
  } catch (error: any) {
    console.error('Exception in adminDeleteUser:', error);
    throw error;
  }
}

// Function to allow administrators to sync all care team rooms
export async function syncAllCareTeamRooms(): Promise<any> {
  try {
    console.log("Starting syncAllCareTeamRooms client function");
    
    // First check if there are any patient assignments
    const { data: assignments, error: assignmentsError } = await supabase
      .from('patient_assignments')
      .select('id, patient_id, doctor_id, nutritionist_id')
      .limit(100);
      
    if (assignmentsError) {
      console.error('Error checking patient assignments:', assignmentsError);
      throw new Error(`Failed to check patient assignments: ${assignmentsError.message}`);
    } else {
      console.log(`Found ${assignments?.length || 0} patient assignments before sync`);
      if (assignments && assignments.length > 0) {
        console.log("Sample assignments:", assignments.slice(0, 5));
      } else {
        console.error("No patient assignments found - this is likely why no care teams are being created!");
        throw new Error("No patient assignments found. Please create patient assignments first.");
      }
    }
    
    console.log("Calling sync-care-team-rooms edge function");
    
    const { data, error } = await supabase.functions.invoke('sync-care-team-rooms');
    
    console.log("Edge function response:", { data, error });
    
    if (error) {
      console.error('Error invoking edge function:', error);
      throw new Error(`Failed to communicate with server: ${error.message}`);
    }
    
    // Handle case where the function returned data but with error status
    if (data && data.error) {
      console.error('Error returned from edge function:', data.error);
      throw new Error(data.error);
    }
    
    // Log success details
    if (data && data.rooms) {
      console.log(`Successfully synced ${data.rooms.length} care team rooms`);
      console.log("Room IDs:", data.rooms);
      
      // Verify rooms exist in the database
      if (data.rooms.length > 0) {
        const { data: rooms, error: roomsError } = await supabase
          .from('chat_rooms')
          .select('id, name, room_type, patient_id')
          .in('id', data.rooms);
          
        if (roomsError) {
          console.error('Error fetching synced rooms:', roomsError);
        } else {
          console.log(`Verified ${rooms?.length || 0} rooms exist in database`);
          console.log("Room details:", JSON.stringify(rooms?.slice(0, 3)));
          
          // Verify room members exist
          if (rooms && rooms.length > 0) {
            const roomId = rooms[0].id;
            const { data: members, error: membersError } = await supabase
              .from('room_members')
              .select('user_id, role')
              .eq('room_id', roomId);
              
            if (membersError) {
              console.error(`Error fetching members for room ${roomId}:`, membersError);
            } else {
              console.log(`Room ${roomId} has ${members?.length || 0} members:`, members);
            }
          }
        }
      }
    } else {
      console.warn("No rooms were returned from the sync operation");
    }
    
    return data;
  } catch (error: any) {
    console.error('Exception in syncAllCareTeamRooms:', error);
    throw error;
  }
}
